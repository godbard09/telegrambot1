from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes
import ccxt
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os
import asyncio
import json
import pytz
import re
import os

# Token bot t·ª´ BotFather
TOKEN = "8081244500:AAFkXKLfVoXQeqDYVW_HMdXluGELf9AWD3M"

# ƒê·ªãa ch·ªâ Webhook (thay YOUR_RENDER_URL b·∫±ng URL ·ª©ng d·ª•ng Render c·ªßa b·∫°n)
WEBHOOK_URL = f"https://telegrambot-an3l.onrender.com"
# Kh·ªüi t·∫°o KuCoin
exchange = ccxt.kucoin()
# L∆∞u tr·ªØ l·ªãch s·ª≠ t√≠n hi·ªáu
signal_history = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G·ª≠i tin nh·∫Øn ch√†o m·ª´ng v√† h∆∞·ªõng d·∫´n."""
    await update.message.reply_text(
        "Ch√†o m·ª´ng! T√¥i l√† bot h·ªó tr·ª£ c·∫£nh b√°o t√≠n hi·ªáu mua/b√°n ti·ªÅn m√£ h√≥a.\n"
        "D∆∞·ªõi ƒë√¢y l√† c√°c l·ªánh b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng:\n"
        "G√µ /chart <m√£ giao d·ªãch> ƒë·ªÉ xem bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t (v√≠ d·ª•: /chart BTC/USDT).\n"
        "G√µ /top ƒë·ªÉ xem top 10 c·∫∑p giao d·ªãch tƒÉng, gi·∫£m m·∫°nh nh·∫•t 24 gi·ªù qua.\n"
        "G√µ /signal <m√£ giao d·ªãch> ƒë·ªÉ xem l·ªãch s·ª≠ t√≠n hi·ªáu mua b√°n trong 7 ng√†y qua.\n"
        "G√µ /smarttrade <m√£ giao d·ªãch> ƒë·ªÉ xem th√¥ng tin v√† t√≠n hi·ªáu mua b√°n m·ªõi nh·∫•t.\n"
        "G√µ /list ƒë·ªÉ xem top 10 c·∫∑p giao d·ªãch c√≥ t√≠n hi·ªáu mua b√°n g·∫ßn ƒë√¢y."
    )


# Kh·ªüi t·∫°o m√∫i gi·ªù Vi·ªát Nam
vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')


def escape_markdown(text: str, ignore: list = None) -> str:
    """
    Tho√°t c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát cho Markdown v2.
    C√°c k√Ω t·ª± trong danh s√°ch `ignore` s·∫Ω kh√¥ng b·ªã tho√°t.
    """
    if ignore is None:
        ignore = []
    # C√°c k√Ω t·ª± Markdown c·∫ßn tho√°t
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    # Lo·∫°i b·ªè c√°c k√Ω t·ª± trong danh s√°ch ignore
    for char in ignore:
        escape_chars = escape_chars.replace(char, "")
    # Thay th·∫ø c√°c k√Ω t·ª± c·∫ßn tho√°t b·∫±ng c√°ch th√™m d·∫•u '\'
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)


async def current_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        symbol = context.args[0] if context.args else None
        if not symbol:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p m√£ giao d·ªãch. V√≠ d·ª•: /smarttrade BTC/USDT")
            return

        markets = exchange.load_markets()
        if symbol not in markets:
            await update.message.reply_text(f"M√£ giao d·ªãch kh√¥ng h·ª£p l·ªá: {symbol}. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            return

        quote_currency = symbol.split('/')[1]
        ticker = exchange.fetch_ticker(symbol)
        current_price = ticker['last']
        percentage_change = ticker['percentage']
        volume_24h = ticker.get('quoteVolume', 0)

        timestamp = (
            pd.to_datetime(ticker['timestamp'], unit='ms')
            .tz_localize('UTC')
            .tz_convert(vietnam_tz)
            .strftime('%Y-%m-%d %H:%M:%S')
        )

        timeframe = '6h'
        limit = 500
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = (
            pd.to_datetime(df['timestamp'], unit='ms')
            .dt.tz_localize('UTC')
            .dt.tz_convert(vietnam_tz)
        )

        if len(df) < 100:
            await update.message.reply_text("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n ch·ªâ b√°o k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.")
            return

        df['MA50'] = df['close'].rolling(window=50).mean()
        df['MA100'] = df['close'].rolling(window=100).mean()
        df['EMA12'] = df['close'].ewm(span=12).mean()
        df['EMA26'] = df['close'].ewm(span=26).mean()
        df['MACD'] = df['EMA12'] - df['EMA26']
        df['Signal'] = df['MACD'].ewm(span=9).mean()
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['RSI'] = 100 - (100 / (1 + rs))
        df['BB_Middle'] = df['close'].rolling(window=20).mean()
        df['BB_Upper'] = df['BB_Middle'] + 2 * df['close'].rolling(window=20).std()
        df['BB_Lower'] = df['BB_Middle'] - 2 * df['close'].rolling(window=20).std()

        trend = "Kh√¥ng x√°c ƒë·ªãnh"
        if len(df) > 1:
            last_row = df.iloc[-1]
            prev_row = df.iloc[-2]
            if last_row['close'] > last_row['MA50'] and last_row['close'] > last_row['MA100'] and last_row['MA50'] > prev_row['MA50']:
                trend = "TƒÇNG"
            elif last_row['close'] < last_row['MA50'] and last_row['close'] < last_row['MA100'] and last_row['MA50'] < prev_row['MA50']:
                trend = "GI·∫¢M"
            else:
                trend = "ƒêI NGANG"

        signals = []
        for _, row in df.iterrows():
            if row['close'] > row['MA50'] and row['MACD'] > row['Signal'] and row['RSI'] < 30:
                signals.append({"type": "MUA", "price": row['close'], "timestamp": row['timestamp']})
            elif row['close'] <= row['BB_Lower']:
                signals.append({"type": "MUA", "price": row['close'], "timestamp": row['timestamp']})
            elif row['close'] < row['MA50'] and row['MACD'] < row['Signal'] and row['RSI'] > 70:
                signals.append({"type": "B√ÅN", "price": row['close'], "timestamp": row['timestamp']})
            elif row['close'] >= row['BB_Upper']:
                signals.append({"type": "B√ÅN", "price": row['close'], "timestamp": row['timestamp']})

        recent_signal = signals[-1] if signals else None
        position_info = "Kh√¥ng c√≥ t√≠n hi·ªáu mua/b√°n g·∫ßn ƒë√¢y."

        if recent_signal:
            if recent_signal['type'] == "MUA":
                profit_loss = ((current_price - recent_signal['price']) / recent_signal['price']) * 100
                profit_color = (
                    f"{profit_loss:.2f}% üü¢" if profit_loss > 0 else
                    f"{profit_loss:.2f}% üî¥" if profit_loss < 0 else
                    f"{profit_loss:.2f}% üü°"
                )
                position_info = (
                    f"- Xu h∆∞·ªõng: **{trend}**\n"
                    f"- V·ªã th·∫ø hi·ªán t·∫°i: **MUA**\n"
                    f"- Ng√†y mua: {recent_signal['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"- Gi√° mua: {recent_signal['price']:.2f} {quote_currency}\n"
                    f"- L√£i/L·ªó: {profit_color}"
                )
            elif recent_signal['type'] == "B√ÅN":
                prior_buy = next((s for s in reversed(signals) if s['type'] == "MUA" and s['timestamp'] < recent_signal['timestamp']), None)
                if prior_buy:
                    profit_loss = ((recent_signal['price'] - prior_buy['price']) / prior_buy['price']) * 100
                    profit_color = (
                        f"{profit_loss:.2f}% üü¢" if profit_loss > 0 else
                        f"{profit_loss:.2f}% üî¥" if profit_loss < 0 else
                        f"{profit_loss:.2f}% üü°"
                    )
                    position_info = (
                        f"- Xu h∆∞·ªõng: **{trend}**\n"
                        f"- V·ªã th·∫ø hi·ªán t·∫°i: **B√ÅN**\n"
                        f"- Ng√†y mua: {prior_buy['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                        f"- Gi√° mua: {prior_buy['price']:.2f} {quote_currency}\n"
                        f"- Ng√†y b√°n: {recent_signal['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                        f"- Gi√° b√°n: {recent_signal['price']:.2f} {quote_currency}\n"
                        f"- L√£i/L·ªó: {profit_color}"
                    )
                else:
                    position_info = (
                        f"- Xu h∆∞·ªõng: **{trend}**\n"
                        f"- V·ªã th·∫ø hi·ªán t·∫°i: **B√ÅN**\n"
                        f"- Ng√†y b√°n: {recent_signal['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                        f"- Gi√° b√°n: {recent_signal['price']:.2f} {quote_currency}\n"
                        f"- L√£i/L·ªó: Kh√¥ng x√°c ƒë·ªãnh (kh√¥ng c√≥ t√≠n hi·ªáu mua tr∆∞·ªõc ƒë√≥)."
                    )

        message = escape_markdown(
            f"Th√¥ng tin gi√° hi·ªán t·∫°i cho {symbol}:\n"
            f"- Gi√° hi·ªán t·∫°i: {current_price:.2f} {quote_currency}\n"
            f"- Bi·∫øn ƒë·ªông trong 24 gi·ªù qua: {percentage_change:.2f}%\n"
            f"- Kh·ªëi l∆∞·ª£ng giao d·ªãch trong 24 gi·ªù qua: {volume_24h:.2f} {quote_currency}\n"
            f"- Th·ªùi gian c·∫≠p nh·∫≠t: {timestamp}\n\n"
            f"Th√¥ng tin v·ªã th·∫ø:\n{position_info}",
            ignore=["*"]
        )
        await update.message.reply_text(message, parse_mode="MarkdownV2")

    except Exception as e:
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {e}")

async def chart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """T·∫°o v√† g·ª≠i bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t."""
    try:
        symbol = context.args[0] if context.args else context.chat_data.get("symbol")
        if not symbol:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p m√£ giao d·ªãch. V√≠ d·ª•: /chart BTC/USDT")
            return

        timeframe = '1h'
        limit = 8760

        markets = exchange.load_markets()
        if symbol not in markets:
            await update.message.reply_text(f"M√£ giao d·ªãch kh√¥ng h·ª£p l·ªá: {symbol}. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            return

        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        # Chuy·ªÉn ƒë·ªïi timestamp sang gi·ªù Vi·ªát Nam
        df['timestamp'] = (
            pd.to_datetime(df['timestamp'], unit='ms')
            .dt.tz_localize('UTC')
            .dt.tz_convert(vietnam_tz)
        )

        # T√≠nh to√°n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
        df['MA50'] = df['close'].rolling(window=50).mean()
        df['MA100'] = df['close'].rolling(window=100).mean()

        # Bollinger Bands
        df['BB_Middle'] = df['close'].rolling(window=20).mean()
        df['BB_Upper'] = df['BB_Middle'] + 2 * df['close'].rolling(window=20).std()
        df['BB_Lower'] = df['BB_Middle'] - 2 * df['close'].rolling(window=20).std()

        # MACD
        df['EMA12'] = df['close'].ewm(span=12).mean()
        df['EMA26'] = df['close'].ewm(span=26).mean()
        df['MACD'] = df['EMA12'] - df['EMA26']
        df['Signal'] = df['MACD'].ewm(span=9).mean()
        df['MACD_Hist'] = df['MACD'] - df['Signal']

        # RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['RSI'] = 100 - (100 / (1 + rs))

        # Bi·ªÉu ƒë·ªì Candlestick v√† MACD ƒë∆∞·ª£c ƒë·∫∑t ri√™ng bi·ªát
        fig = make_subplots(
            rows=4,  # TƒÉng s·ªë l∆∞·ª£ng h√†ng l√™n 4 ƒë·ªÉ t√°ch MACD kh·ªèi bi·ªÉu ƒë·ªì gi√°
            cols=1,
            shared_xaxes=True,
            vertical_spacing=0.03,
            row_heights=[0.5, 0.2, 0.2, 0.1],  # C·∫≠p nh·∫≠t chi·ªÅu cao t·ª´ng h√†ng
            specs=[[{"secondary_y": True}], [{}], [{}], [{}]]
        )

        # Candlestick v√† Bollinger Bands
        fig.add_trace(go.Candlestick(
            x=df['timestamp'],
            open=df['open'],
            high=df['high'],
            low=df['low'],
            close=df['close'],
            name="Candlestick"
        ), row=1, col=1, secondary_y=False)

        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['BB_Upper'],
            mode='lines',
            line=dict(color='red', width=1),
            name='BB Upper'
        ), row=1, col=1, secondary_y=False)

        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['BB_Middle'],
            mode='lines',
            line=dict(color='blue', width=1),
            name='BB Middle'
        ), row=1, col=1, secondary_y=False)

        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['BB_Lower'],
            mode='lines',
            line=dict(color='green', width=1),
            name='BB Lower'
        ), row=1, col=1, secondary_y=False)

        # Th√™m c√°c ƒë∆∞·ªùng MA50 v√† MA100
        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['MA50'],
            mode='lines',
            line=dict(color='orange', width=1.5),
            name='MA50'
        ), row=1, col=1, secondary_y=False)

        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['MA100'],
            mode='lines',
            line=dict(color='purple', width=1.5),
            name='MA100'
        ), row=1, col=1, secondary_y=False)

        # Bi·ªÉu ƒë·ªì kh·ªëi l∆∞·ª£ng b√™n tr·ª•c y2, c√πng m√†u v·ªõi gi√°
        volume_colors = [
            'green' if row['close'] > row['open'] else 'red'
            for _, row in df.iterrows()
        ]
        fig.add_trace(go.Bar(
            x=df['timestamp'],
            y=df['volume'],
            name='Volume',
            marker_color=volume_colors
        ), row=1, col=1, secondary_y=True)

        # Bi·ªÉu ƒë·ªì MACD (ƒë∆∞·ª£c chuy·ªÉn sang h√†ng 2)
        fig.add_trace(go.Bar(
            x=df['timestamp'],
            y=df['MACD_Hist'],
            name='MACD Histogram'
        ), row=2, col=1)

        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['MACD'],
            mode='lines',
            line=dict(color='green', width=1),
            name='MACD'
        ), row=2, col=1)

        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['Signal'],
            mode='lines',
            line=dict(color='red', width=1),
            name='Signal'
        ), row=2, col=1)

        # Bi·ªÉu ƒë·ªì RSI (h√†ng 3)
        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=df['RSI'],
            mode='lines',
            line=dict(color='purple', width=1),
            name='RSI'
        ), row=3, col=1)

        # ƒê∆∞·ªùng gi·ªõi h·∫°n RSI
        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=[70] * len(df),
            mode='lines',
            line=dict(color='red', dash='dash'),
            name='Overbought (70)'
        ), row=3, col=1)

        fig.add_trace(go.Scatter(
            x=df['timestamp'],
            y=[30] * len(df),
            mode='lines',
            line=dict(color='blue', dash='dash'),
            name='Oversold (30)'
        ), row=3, col=1)

        # Layout
        fig.update_layout(
            title=f"BI·ªÇU ƒê·ªí PH√ÇN T√çCH K·ª∏ THU·∫¨T (1H) C·ª¶A {symbol}",
            template="plotly_dark",
            height=1200,  # TƒÉng chi·ªÅu cao bi·ªÉu ƒë·ªì t·ªïng th·ªÉ
            xaxis_rangeslider_visible=False
        )

        # L∆∞u bi·ªÉu ƒë·ªì th√†nh HTML
        temp_file = f"{symbol.replace('/', '_')}_chart.html"
        fig.write_html(temp_file)

        # G·ª≠i file HTML qua Telegram
        if update.callback_query:
            with open(temp_file, 'rb') as html_file:
                await update.callback_query.message.reply_document(document=html_file, filename=temp_file)
        else:
            with open(temp_file, 'rb') as html_file:
                await update.message.reply_document(document=html_file, filename=temp_file)

        # X√≥a file t·∫°m
        os.remove(temp_file)
    except Exception as e:
        if update.callback_query:
            await update.callback_query.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {e}")
        else:
            await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {e}")



async def top(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G·ª≠i danh s√°ch top 10 c·∫∑p giao d·ªãch tƒÉng, gi·∫£m m·∫°nh nh·∫•t v·ªõi n√∫t t∆∞∆°ng t√°c."""
    try:
        # L·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng t·ª´ KuCoin
        markets = exchange.fetch_tickers()
        data = []

        # T√≠nh to√°n ph·∫ßn trƒÉm bi·∫øn ƒë·ªông gi√° v√† kh·ªëi l∆∞·ª£ng giao d·ªãch
        for symbol, ticker in markets.items():
            change = ticker.get('percentage')
            if change is not None:
                data.append((symbol, change))


        # L·∫•y top 10 tƒÉng, gi·∫£m m·∫°nh nh·∫•t 
        top_gainers = sorted(data, key=lambda x: x[1], reverse=True)[:10]
        top_losers = sorted(data, key=lambda x: x[1])[:10]

        # T·∫°o danh s√°ch n√∫t t∆∞∆°ng t√°c cho top tƒÉng
        gainers_keyboard = [
            [InlineKeyboardButton(f"{symbol}: +{change:.2f}%", callback_data=symbol)]
            for symbol, change in top_gainers
        ]

        # T·∫°o danh s√°ch n√∫t t∆∞∆°ng t√°c cho top gi·∫£m
        losers_keyboard = [
            [InlineKeyboardButton(f"{symbol}: {change:.2f}%", callback_data=symbol)]
            for symbol, change in top_losers
        ]


        # G·ª≠i danh s√°ch top tƒÉng m·∫°nh nh·∫•t
        await update.message.reply_text(
            "Top 10 c·∫∑p giao d·ªãch tƒÉng m·∫°nh nh·∫•t trong 24 gi·ªù qua:",
            reply_markup=InlineKeyboardMarkup(gainers_keyboard)
        )

        # G·ª≠i danh s√°ch top gi·∫£m m·∫°nh nh·∫•t
        await update.message.reply_text(
            "Top 10 c·∫∑p giao d·ªãch gi·∫£m m·∫°nh nh·∫•t trong 24 gi·ªù qua:",
            reply_markup=InlineKeyboardMarkup(losers_keyboard)
        )


    except Exception as e:
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {e}")



async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """X·ª≠ l√Ω n√∫t b·∫•m t·ª´ danh s√°ch /top ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t."""
    query = update.callback_query
    await query.answer()


    # L·∫•y m√£ giao d·ªãch t·ª´ callback_data
    symbol = query.data
    context.chat_data["symbol"] = symbol  # L∆∞u v√†o chat_data ƒë·ªÉ g·ªçi l·∫°i n·∫øu c·∫ßn
    await chart(update, context)


async def list_signals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Hi·ªÉn th·ªã top 10 c·∫∑p giao d·ªãch c√≥ t√≠n hi·ªáu mua v√† t√≠n hi·ªáu b√°n g·∫ßn ƒë√¢y."""
    try:
        # L·∫•y danh s√°ch m√£ giao d·ªãch
        markets = exchange.load_markets()
        symbols = list(markets.keys())
        timeframe = '6h'
        limit = 200
        buy_signals = []
        sell_signals = []

        for symbol in symbols:
            try:
                # L·∫•y d·ªØ li·ªáu t·ª´ KuCoin
                ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
                df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')

                # T√≠nh to√°n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
                df['MA50'] = df['close'].rolling(window=50).mean()
                df['EMA12'] = df['close'].ewm(span=12).mean()
                df['EMA26'] = df['close'].ewm(span=26).mean()
                df['MACD'] = df['EMA12'] - df['EMA26']
                df['Signal'] = df['MACD'].ewm(span=9).mean()
                delta = df['close'].diff()
                gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
                loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
                rs = gain / loss
                df['RSI'] = 100 - (100 / (1 + rs))
                df['BB_Middle'] = df['close'].rolling(window=20).mean()
                df['BB_Upper'] = df['BB_Middle'] + 2 * df['close'].rolling(window=20).std()
                df['BB_Lower'] = df['BB_Middle'] - 2 * df['close'].rolling(window=20).std()

                # L·∫•y t√≠n hi·ªáu g·∫ßn nh·∫•t
                last_row = df.iloc[-1]
                current_time = last_row['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
                current_price = last_row['close']

                # L·∫•y ƒë∆°n v·ªã gi√° t·ª´ c·∫∑p giao d·ªãch
                quote_currency = symbol.split('/')[1] if '/' in symbol else 'USD'

                # T√≠n hi·ªáu mua
                if last_row['close'] > last_row['MA50'] and last_row['MACD'] > last_row['Signal'] and last_row['RSI'] < 30:
                    buy_signals.append((symbol, current_price, current_time, quote_currency))
                elif last_row['close'] <= last_row['BB_Lower']:
                    buy_signals.append((symbol, current_price, current_time, quote_currency))

                # T√≠n hi·ªáu b√°n
                if last_row['close'] < last_row['MA50'] and last_row['MACD'] < last_row['Signal'] and last_row['RSI'] > 70:
                    sell_signals.append((symbol, current_price, current_time, quote_currency))
                elif last_row['close'] >= last_row['BB_Upper']:
                    sell_signals.append((symbol, current_price, current_time, quote_currency))

            except Exception as e:
                print(f"L·ªói khi x·ª≠ l√Ω {symbol}: {e}")
                continue

        # L·∫•y top 10 t√≠n hi·ªáu mua v√† b√°n
        top_buy_signals = sorted(buy_signals, key=lambda x: x[2], reverse=True)[:10]
        top_sell_signals = sorted(sell_signals, key=lambda x: x[2], reverse=True)[:10]

        # T·∫°o danh s√°ch n√∫t t∆∞∆°ng t√°c cho t√≠n hi·ªáu mua
        buy_keyboard = [
            [InlineKeyboardButton(f"{symbol}: Mua ({price:.8f} {unit})", callback_data=symbol)]
            for symbol, price, _, unit in top_buy_signals
        ]

        # T·∫°o danh s√°ch n√∫t t∆∞∆°ng t√°c cho t√≠n hi·ªáu b√°n
        sell_keyboard = [
            [InlineKeyboardButton(f"{symbol}: B√°n ({price:.8f} {unit})", callback_data=symbol)]
            for symbol, price, _, unit in top_sell_signals
        ]

        # G·ª≠i danh s√°ch t√≠n hi·ªáu mua
        if buy_keyboard:
            await update.message.reply_text(
                "Top 10 c·∫∑p giao d·ªãch c√≥ t√≠n hi·ªáu MUA g·∫ßn ƒë√¢y:",
                reply_markup=InlineKeyboardMarkup(buy_keyboard)
            )
        else:
            await update.message.reply_text("Hi·ªán kh√¥ng c√≥ t√≠n hi·ªáu MUA n√†o g·∫ßn ƒë√¢y.")

        # G·ª≠i danh s√°ch t√≠n hi·ªáu b√°n
        if sell_keyboard:
            await update.message.reply_text(
                "Top 10 c·∫∑p giao d·ªãch c√≥ t√≠n hi·ªáu B√ÅN g·∫ßn ƒë√¢y:",
                reply_markup=InlineKeyboardMarkup(sell_keyboard)
            )
        else:
            await update.message.reply_text("Hi·ªán kh√¥ng c√≥ t√≠n hi·ªáu B√ÅN n√†o g·∫ßn ƒë√¢y.")

    except Exception as e:
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {e}")


async def signal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Ph√¢n t√≠ch v√† g·ª≠i t√≠n hi·ªáu mua b√°n."""
    try:
        symbol = context.args[0] if context.args else None
        if not symbol:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p m√£ giao d·ªãch. V√≠ d·ª•: /signal BTC/USDT")
            return

        # X√°c ƒë·ªãnh ƒë∆°n v·ªã gi√° t·ª´ c·∫∑p giao d·ªãch
        if "/" in symbol:
            base, quote = symbol.split("/")
            unit = quote
        else:
            await update.message.reply_text("C·∫∑p giao d·ªãch kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng nh∆∞ BTC/USDT.")
            return

        timeframe = '6h'
        limit = 500

        markets = exchange.load_markets()
        if symbol not in markets:
            await update.message.reply_text(f"M√£ giao d·ªãch kh√¥ng h·ª£p l·ªá: {symbol}. Vui l√≤ng ki·ªÉm tra l·∫°i.")
            return

        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        # Chuy·ªÉn ƒë·ªïi timestamp sang gi·ªù Vi·ªát Nam
        df['timestamp'] = (
            pd.to_datetime(df['timestamp'], unit='ms')
            .dt.tz_localize('UTC')
            .dt.tz_convert(vietnam_tz)
        )

        # T√≠nh to√°n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t
        df['MA50'] = df['close'].rolling(window=50).mean()
        df['MA100'] = df['close'].rolling(window=100).mean()
        df['EMA12'] = df['close'].ewm(span=12).mean()
        df['EMA26'] = df['close'].ewm(span=26).mean()
        df['MACD'] = df['EMA12'] - df['EMA26']
        df['Signal'] = df['MACD'].ewm(span=9).mean()
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['RSI'] = 100 - (100 / (1 + rs))
        df['BB_Middle'] = df['close'].rolling(window=20).mean()
        df['BB_Upper'] = df['BB_Middle'] + 2 * df['close'].rolling(window=20).std()
        df['BB_Lower'] = df['BB_Middle'] - 2 * df['close'].rolling(window=20).std()

        # Ph√°t hi·ªán t√≠n hi·ªáu mua b√°n hi·ªán t·∫°i
        last_row = df.iloc[-1]  # L·∫•y d√≤ng d·ªØ li·ªáu cu·ªëi c√πng
        signals_now = []
        last_buy_price = None
        last_buy_price_global = None  # L∆∞u gi√° mua g·∫ßn nh·∫•t h·ª£p l·ªá

        # Th·ªùi ƒëi·ªÉm v√† gi√° hi·ªán t·∫°i
        current_time = last_row['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
        current_price = last_row['close']

        # T√≠n hi·ªáu mua
        if last_row['close'] > last_row['MA50'] and last_row['MACD'] > last_row['Signal'] and last_row['RSI'] < 30:
            last_buy_price = last_row['close']
            last_buy_price_global = last_row['close']  # C·∫≠p nh·∫≠t gi√° mua to√†n c·ª•c
            profit_loss = ((current_price - last_buy_price) / last_buy_price) * 100
            profit_icon = "\U0001F7E2" if profit_loss >= 0 else "\U0001F534"
            signals_now.append(f"\U0001F7E2 Mua: Gi√° {last_row['close']:.2f} {unit} v√†o l√∫c {current_time}. {profit_icon} L√£i/L·ªó: {profit_loss:.2f}%")
        elif last_row['close'] <= last_row['BB_Lower']:
            last_buy_price = last_row['close']
            last_buy_price_global = last_row['close']  # C·∫≠p nh·∫≠t gi√° mua to√†n c·ª•c
            profit_loss = ((current_price - last_buy_price) / last_buy_price) * 100
            profit_icon = "\U0001F7E2" if profit_loss >= 0 else "\U0001F534"
            signals_now.append(f"\U0001F7E2 Mua: Gi√° {last_row['close']:.2f} {unit} v√†o l√∫c {current_time}. {profit_icon} L√£i/L·ªó: {profit_loss:.2f}%")

        # T√≠n hi·ªáu b√°n
        if last_row['close'] < last_row['MA50'] and last_row['MACD'] < last_row['Signal'] and last_row['RSI'] > 70:
            if last_buy_price_global is not None:  # S·ª≠ d·ª•ng gi√° mua g·∫ßn nh·∫•t h·ª£p l·ªá
                profit_loss = ((last_row['close'] - last_buy_price_global) / last_buy_price_global) * 100
                profit_icon = "\U0001F7E2" if profit_loss >= 0 else "\U0001F534"
                signals_now.append(f"\U0001F534 B√°n: Gi√° {current_price:.2f} {unit} v√†o l√∫c {current_time}. {profit_icon} L√£i/L·ªó: {profit_loss:.2f}%")
        elif last_row['close'] >= last_row['BB_Upper']:
            if last_buy_price_global is not None:  # S·ª≠ d·ª•ng gi√° mua g·∫ßn nh·∫•t h·ª£p l·ªá
                profit_loss = ((last_row['close'] - last_buy_price_global) / last_buy_price_global) * 100
                profit_icon = "\U0001F7E2" if profit_loss >= 0 else "\U0001F534"
                signals_now.append(f"\U0001F534 B√°n: Gi√° {current_price:.2f} {unit} v√†o l√∫c {current_time}. {profit_icon} L√£i/L·ªó: {profit_loss:.2f}%")

        # Ph√°t hi·ªán t√≠n hi·ªáu mua b√°n trong 7 ng√†y qua
        signals_past = []
        now = pd.Timestamp.now(tz=vietnam_tz)
        for index, row in df.iterrows():
            if row['timestamp'] < (now - pd.Timedelta(days=7)):
                continue

            # T√≠n hi·ªáu mua trong 7 ng√†y qua
            if row['close'] > row['MA50'] and row['MACD'] > row['Signal'] and row['RSI'] < 30:
                last_buy_price_global = row['close']  # C·∫≠p nh·∫≠t gi√° mua to√†n c·ª•c
                profit_loss = ((current_price - last_buy_price_global) / last_buy_price_global) * 100
                profit_icon = "\U0001F7E2" if profit_loss >= 0 else "\U0001F534"
                signals_past.append(f"\U0001F7E2 Mua: Gi√° {row['close']:.2f} {unit} v√†o l√∫c {row['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}. {profit_icon} L√£i/L·ªó: {profit_loss:.2f}%")
            elif row['close'] <= row['BB_Lower']:
                last_buy_price_global = row['close']  # C·∫≠p nh·∫≠t gi√° mua to√†n c·ª•c
                profit_loss = ((current_price - last_buy_price_global) / last_buy_price_global) * 100
                profit_icon = "\U0001F7E2" if profit_loss >= 0 else "\U0001F534"
                signals_past.append(f"\U0001F7E2 Mua: Gi√° {row['close']:.2f} {unit} v√†o l√∫c {row['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}. {profit_icon} L√£i/L·ªó: {profit_loss:.2f}%")

            # T√≠n hi·ªáu b√°n trong 7 ng√†y qua
            if row['close'] < row['MA50'] and row['MACD'] < row['Signal'] and row['RSI'] > 70:
                if last_buy_price_global is not None:  # S·ª≠ d·ª•ng gi√° mua to√†n c·ª•c
                    profit_loss = ((row['close'] - last_buy_price_global) / last_buy_price_global) * 100
                    profit_icon = "\U0001F7E2" if profit_loss >= 0 else "\U0001F534"
                    signals_past.append(f"\U0001F534 B√°n: Gi√° {row['close']:.2f} {unit} v√†o l√∫c {row['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}. {profit_icon} L√£i/L·ªó: {profit_loss:.2f}%")
            elif row['close'] >= row['BB_Upper']:
                if last_buy_price_global is not None:  # S·ª≠ d·ª•ng gi√° mua to√†n c·ª•c
                    profit_loss = ((row['close'] - last_buy_price_global) / last_buy_price_global) * 100
                    profit_icon = "\U0001F7E2" if profit_loss >= 0 else "\U0001F534"
                    signals_past.append(f"\U0001F534 B√°n: Gi√° {row['close']:.2f} {unit} v√†o l√∫c {row['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}. {profit_icon} L√£i/L·ªó: {profit_loss:.2f}%")

        # G·ª≠i t√≠n hi·ªáu qua Telegram
        signal_message = f"T√≠n hi·ªáu giao d·ªãch cho {symbol}:"
        if signals_now:
            signal_message += "\nT√≠n hi·ªáu hi·ªán t·∫°i:\n" + "\n".join(signals_now)
        else:
            signal_message += "\nHi·ªán t·∫°i kh√¥ng c√≥ t√≠n hi·ªáu r√µ r√†ng."

        if signals_past:
            signal_message += "\n\nT√≠n hi·ªáu trong 7 ng√†y qua:\n" + "\n".join(signals_past)
        else:
            signal_message += "\n\nKh√¥ng c√≥ t√≠n hi·ªáu trong 7 ng√†y qua."

        await update.message.reply_text(signal_message)

    except Exception as e:
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {e}")



async def set_webhook(application: Application):
    """Thi·∫øt l·∫≠p Webhook."""
    await application.bot.set_webhook(WEBHOOK_URL)

def main():
    # L·∫•y c·ªïng t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c s·ª≠ d·ª•ng c·ªïng m·∫∑c ƒë·ªãnh
    port = int(os.getenv("PORT", 8080))
    print(f"ƒêang s·ª≠ d·ª•ng c·ªïng: {port}")  # Log ki·ªÉm tra c·ªïng

    # Kh·ªüi t·∫°o ·ª©ng d·ª•ng Telegram bot
    application = Application.builder().token(TOKEN).build()

    # ƒêƒÉng k√Ω c√°c handler
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("chart", chart))
    application.add_handler(CommandHandler("signal", signal))
    application.add_handler(CommandHandler("top", top))  # Th√™m handler cho /top
    application.add_handler(CommandHandler("list", list_signals))
    application.add_handler(CommandHandler("smarttrade", current_price))  # Th√™m handler cho /cap
    application.add_handler(CallbackQueryHandler(button))  # Th√™m handler cho n√∫t b·∫•m t·ª´ /top

    # Ch·∫°y webhook
    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
